// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/sochain/client.go

// Package mock_sochain is a generated GoMock package.
package mock_sochain

import (
	sochain "sochain-client/pkg/sochain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// BlockHash mocks base method.
func (m *MockConnector) BlockHash(networkID, blockHash string) (*sochain.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockHash", networkID, blockHash)
	ret0, _ := ret[0].(*sochain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockHash indicates an expected call of BlockHash.
func (mr *MockConnectorMockRecorder) BlockHash(networkID, blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockHash", reflect.TypeOf((*MockConnector)(nil).BlockHash), networkID, blockHash)
}

// BlockHeight mocks base method.
func (m *MockConnector) BlockHeight(networkID string, height int) (*sochain.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockHeight", networkID, height)
	ret0, _ := ret[0].(*sochain.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockHeight indicates an expected call of BlockHeight.
func (mr *MockConnectorMockRecorder) BlockHeight(networkID, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockHeight", reflect.TypeOf((*MockConnector)(nil).BlockHeight), networkID, height)
}

// NetworkInfo mocks base method.
func (m *MockConnector) NetworkInfo(networkID string) (*sochain.NetworkInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInfo", networkID)
	ret0, _ := ret[0].(*sochain.NetworkInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInfo indicates an expected call of NetworkInfo.
func (mr *MockConnectorMockRecorder) NetworkInfo(networkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInfo", reflect.TypeOf((*MockConnector)(nil).NetworkInfo), networkID)
}

// Transaction mocks base method.
func (m *MockConnector) Transaction(networkID, txHash string) (*sochain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", networkID, txHash)
	ret0, _ := ret[0].(*sochain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockConnectorMockRecorder) Transaction(networkID, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockConnector)(nil).Transaction), networkID, txHash)
}
